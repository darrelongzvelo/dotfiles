#!/usr/bin/env bash

DEBUG=0
README=1
CONTRIBUTING=1
LICENSE=1
BOOTSTRAP=1
TEST=1

cmd(){ echo `basename $0`; }

# Help command output
usage(){
echo "\
`cmd` [OPTION...]

Checks a project for common sources of contributor friction

-r, --readme; Check for existence of README
-c, --contributing; Check for contributing guidelines
-l, --license; Check for a project license
-b, --bootstrap; Check for a bootstrap script
-t, --test; Check for a test script
--no-readme; Skip README check
--no-contributing; Skip contributing guide check
--no-license; Skip license check
--no-bootstrap; Skip bootstrap script check
--no-test; Skip test script check
" | column -t -s ";"
}

# status variable
STATUS=0

function log {
  echo "[${1}] ${2}"
}

function warning {
  if [ $STATUS -lt 1 ]; then
    STATUS=1
  fi
  log "WARNING" "${1}"
}

function error {
  if [ $STATUS -lt 2 ]; then
    STATUS=2
  fi
  log "ERROR" "${1}"
}

usage_error() {
    error "`cmd`: invalid option -- '$1'. Try '`cmd` -h' for more information.";
}

readme(){
    if [ $README -eq 1 ]; then
      if [[ -z $(find . -iname 'readme*') ]]; then
        error "README not found"
        log "FIXME" "Every project begins with a README. http://bit.ly/1dqUYQF"
      fi
    fi
}

contributing(){
    if [ $CONTRIBUTING -eq 1 ]; then
      if [[ -z $(find . -iname 'contributing*') ]]; then
        warning "Contributing guide not found"
        log "FIXME" "Add a CONTRIBUTING guide for potential contributors. http://git.io/z-TiGg"
      fi
    fi
}

license(){
    if [ $LICENSE -eq 1 ]; then
      if [[ -z $(find . -iname 'license*') ]]; then
        error "License file not found"
        log "FIXME" "Add a license to protect yourself and your users. http://choosealicense.com/"
      fi
    fi
}

bootstrap(){
    if [ $BOOTSTRAP -eq 1 ]; then
      if [[ -z $(find . -iname 'bootstrap*') ]]; then
        warning "Bootstrap script not found"
        log "FIXME" "A bootstrap script makes setup a snap. http://bit.ly/JZjVL6"
      fi
    fi
}

test_script(){
    if [ $TEST -eq 1 ]; then
      if [[ -z $(find . -iname 'test*') ]]; then
        warning "Test script not found"
        log "FIXME" "Make it easy to run the test suite regardless of project type. http://bit.ly/JZjVL6"
      fi
    fi
}


for pass in 1 2; do
    while [ -n "$1" ]; do
        case $1 in
            --) shift; break;;
            -*) case $1 in
                -h|--help)             usage; exit 1;;
                -d|--debug)            DEBUG=1;;
                -r|--readme)           README=1;;
                -c|--contributing)     CONTRIBUTING=1;;
                -l|--license)          LICENSE=1;;
                -b|--bootstrap)        BOOTSTRAP=1;;
                -t|--test)             TEST=1;;
                --no-readme)           README=0;;
                --no-contributing)     CONTRIBUTING=0;;
                --no-license)          LICENSE=0;;
                --no-bootstrap)        BOOTSTRAP=0;;
                --no-test)             TEST=0;;
                --*)                 usage_error $1;;
                -*)                  if [ $pass -eq 1 ]; then ARGS="$ARGS $1";
                                     else usage_error $1; fi;;
                esac;;
            *)  if [ $pass -eq 1 ]; then ARGS="$ARGS $1";
                else error $1; fi;;
        esac
        shift
    done
    if [ $pass -eq 1 ]; then ARGS=`getopt $opts $ARGS`
        if [ $? != 0 ]; then usage; exit 2; fi; set -- $ARGS
    fi
done

readme
license
contributing
bootstrap
test_script

if [ $STATUS -eq 0 ]; then
  log "OK" "All is well!"
fi
if [ $STATUS -eq 1 ]; then
  log "WARNING" "Some warnings found."
fi
if [ $STATUS -eq 2 ]; then
  log "CRITICAL" "Some critical problems found. Please fix right away!"
fi

exit $STATUS
